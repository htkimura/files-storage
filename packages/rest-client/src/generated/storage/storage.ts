/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * files-storage
 * This API is for storing files for different users
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'



export const storageControllerGetObjectUrl = (
    objectName: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.get(
      `/objects/${objectName}`,options
    );
  }


export const getStorageControllerGetObjectUrlQueryKey = (objectName: string,) => {
    return [`/objects/${objectName}`] as const;
    }

    
export const getStorageControllerGetObjectUrlQueryOptions = <TData = Awaited<ReturnType<typeof storageControllerGetObjectUrl>>, TError = AxiosError<unknown>>(objectName: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof storageControllerGetObjectUrl>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getStorageControllerGetObjectUrlQueryKey(objectName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof storageControllerGetObjectUrl>>> = ({ signal }) => storageControllerGetObjectUrl(objectName, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(objectName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof storageControllerGetObjectUrl>>, TError, TData> & { queryKey: QueryKey }
}

export type StorageControllerGetObjectUrlQueryResult = NonNullable<Awaited<ReturnType<typeof storageControllerGetObjectUrl>>>
export type StorageControllerGetObjectUrlQueryError = AxiosError<unknown>



export function useStorageControllerGetObjectUrl<TData = Awaited<ReturnType<typeof storageControllerGetObjectUrl>>, TError = AxiosError<unknown>>(
 objectName: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof storageControllerGetObjectUrl>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getStorageControllerGetObjectUrlQueryOptions(objectName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const storageControllerUploadObject = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `/objects`,undefined,options
    );
  }



export const getStorageControllerUploadObjectMutationOptions = <TData = Awaited<ReturnType<typeof storageControllerUploadObject>>, TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,void, TContext>, axios?: AxiosRequestConfig}
) => {
const mutationKey = ['storageControllerUploadObject'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof storageControllerUploadObject>>, void> = () => {
          

          return  storageControllerUploadObject(axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,void, TContext>}

    export type StorageControllerUploadObjectMutationResult = NonNullable<Awaited<ReturnType<typeof storageControllerUploadObject>>>
    
    export type StorageControllerUploadObjectMutationError = AxiosError<unknown>

    export const useStorageControllerUploadObject = <TData = Awaited<ReturnType<typeof storageControllerUploadObject>>, TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        TData,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getStorageControllerUploadObjectMutationOptions(options);

      return useMutation(mutationOptions);
    }
    