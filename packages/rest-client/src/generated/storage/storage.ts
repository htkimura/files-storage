/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * files-storage
 * This API is for storing files for different users
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  DeleteBulkFilesByIdsParams,
  DeleteBulkFilesOutput,
  FileWithPresignedUrl,
  GetBulkFilesByIdsParams,
  GetPresignedUploadUrlParams,
  UploadFileOutput
} from '.././model'



/**
 * Returns presigned url to upload file
 * @summary Get presigned url to upload file
 */
export const getPresignedUploadUrl = (
    params: GetPresignedUploadUrlParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UploadFileOutput>> => {
    
    
    return axios.get(
      `/uploads/presigned-url`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetPresignedUploadUrlQueryKey = (params: GetPresignedUploadUrlParams,) => {
    return [`/uploads/presigned-url`, ...(params ? [params]: [])] as const;
    }

    
export const getGetPresignedUploadUrlQueryOptions = <TData = Awaited<ReturnType<typeof getPresignedUploadUrl>>, TError = AxiosError<unknown>>(params: GetPresignedUploadUrlParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPresignedUploadUrl>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPresignedUploadUrlQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPresignedUploadUrl>>> = ({ signal }) => getPresignedUploadUrl(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPresignedUploadUrl>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPresignedUploadUrlQueryResult = NonNullable<Awaited<ReturnType<typeof getPresignedUploadUrl>>>
export type GetPresignedUploadUrlQueryError = AxiosError<unknown>


/**
 * @summary Get presigned url to upload file
 */

export function useGetPresignedUploadUrl<TData = Awaited<ReturnType<typeof getPresignedUploadUrl>>, TError = AxiosError<unknown>>(
 params: GetPresignedUploadUrlParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPresignedUploadUrl>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetPresignedUploadUrlQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Returns the authenticated user files by ids with presigned urls
 * @summary Get the authenticated user files by ids with presigned urls
 */
export const getBulkFilesByIds = (
    params: GetBulkFilesByIdsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<FileWithPresignedUrl[]>> => {
    
    
    return axios.get(
      `/files/bulk`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetBulkFilesByIdsQueryKey = (params: GetBulkFilesByIdsParams,) => {
    return [`/files/bulk`, ...(params ? [params]: [])] as const;
    }

    
export const getGetBulkFilesByIdsQueryOptions = <TData = Awaited<ReturnType<typeof getBulkFilesByIds>>, TError = AxiosError<unknown>>(params: GetBulkFilesByIdsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getBulkFilesByIds>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBulkFilesByIdsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBulkFilesByIds>>> = ({ signal }) => getBulkFilesByIds(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBulkFilesByIds>>, TError, TData> & { queryKey: QueryKey }
}

export type GetBulkFilesByIdsQueryResult = NonNullable<Awaited<ReturnType<typeof getBulkFilesByIds>>>
export type GetBulkFilesByIdsQueryError = AxiosError<unknown>


/**
 * @summary Get the authenticated user files by ids with presigned urls
 */

export function useGetBulkFilesByIds<TData = Awaited<ReturnType<typeof getBulkFilesByIds>>, TError = AxiosError<unknown>>(
 params: GetBulkFilesByIdsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getBulkFilesByIds>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetBulkFilesByIdsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Delete files on database and storage service by ids
 * @summary Delete files by ids
 */
export const deleteBulkFilesByIds = (
    params: DeleteBulkFilesByIdsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DeleteBulkFilesOutput>> => {
    
    
    return axios.delete(
      `/files/bulk`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getDeleteBulkFilesByIdsMutationOptions = <TData = Awaited<ReturnType<typeof deleteBulkFilesByIds>>, TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{params: DeleteBulkFilesByIdsParams}, TContext>, axios?: AxiosRequestConfig}
) => {
const mutationKey = ['deleteBulkFilesByIds'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteBulkFilesByIds>>, {params: DeleteBulkFilesByIdsParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteBulkFilesByIds(params,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{params: DeleteBulkFilesByIdsParams}, TContext>}

    export type DeleteBulkFilesByIdsMutationResult = NonNullable<Awaited<ReturnType<typeof deleteBulkFilesByIds>>>
    
    export type DeleteBulkFilesByIdsMutationError = AxiosError<unknown>

    /**
 * @summary Delete files by ids
 */
export const useDeleteBulkFilesByIds = <TData = Awaited<ReturnType<typeof deleteBulkFilesByIds>>, TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{params: DeleteBulkFilesByIdsParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        TData,
        TError,
        {params: DeleteBulkFilesByIdsParams},
        TContext
      > => {

      const mutationOptions = getDeleteBulkFilesByIdsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Returns file by id with presigned url
 * @summary Get file by id with presigned url
 */
export const getFileById = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<FileWithPresignedUrl>> => {
    
    
    return axios.get(
      `/files/${id}`,options
    );
  }


export const getGetFileByIdQueryKey = (id: string,) => {
    return [`/files/${id}`] as const;
    }

    
export const getGetFileByIdQueryOptions = <TData = Awaited<ReturnType<typeof getFileById>>, TError = AxiosError<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getFileById>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFileByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFileById>>> = ({ signal }) => getFileById(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFileById>>, TError, TData> & { queryKey: QueryKey }
}

export type GetFileByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getFileById>>>
export type GetFileByIdQueryError = AxiosError<unknown>


/**
 * @summary Get file by id with presigned url
 */

export function useGetFileById<TData = Awaited<ReturnType<typeof getFileById>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getFileById>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetFileByIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Delete file on database and storage service by id
 * @summary Delete file by id
 */
export const deleteFileById = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<boolean>> => {
    
    
    return axios.delete(
      `/files/${id}`,options
    );
  }



export const getDeleteFileByIdMutationOptions = <TData = Awaited<ReturnType<typeof deleteFileById>>, TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
) => {
const mutationKey = ['deleteFileById'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteFileById>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteFileById(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{id: string}, TContext>}

    export type DeleteFileByIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteFileById>>>
    
    export type DeleteFileByIdMutationError = AxiosError<unknown>

    /**
 * @summary Delete file by id
 */
export const useDeleteFileById = <TData = Awaited<ReturnType<typeof deleteFileById>>, TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        TData,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteFileByIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    